import type { AIWalletAnalysis } from "@/types/wallet-analysis"

export const aiWalletAnalysis: AIWalletAnalysis = {
  id: 4,
  wallet_address: "0x510DeD3072ac6967827A498360eDB0edf77BE542",
  network: "Lisk",
  analysis_timestamp: "2025-05-14T13:18:43.313177+00:00",
  final_score: 35.0,
  risk_level: "Medium",
  wallet_metadata: {
    age_days: 9,
    last_seen: "2025-05-14T05:35:58+00:00",
    first_seen: "2025-05-05T21:25:04+00:00",
    inbound_count: 0,
    outbound_count: 2,
    total_transactions: 2,
    unique_tokens_used: 1,
    uses_only_transfers: false,
    all_contracts_verified: false,
    linked_to_flagged_entity: false,
    unique_contracts_interacted: 1,
    funded_by_established_wallet: false,
  },
  scoring_breakdown: [
    {
      reason: "Wallet has both inbound (funding) and outbound (spending) transactions.",
      criteria: "Inbound and outbound transactions",
      score_delta: 15.0,
    },
    {
      reason: "Transaction amounts appear consistent, primarily involving 'approve' calls for the same token.",
      criteria: "Transaction amounts are consistent or logically variable",
      score_delta: 10.0,
    },
    {
      reason:
        "The wallet primarily interacts with a single contract, indicated by repeated 'approve' calls to the same 'contract' address.",
      criteria: "Wallet interacts with multiple contracts/addresses",
      score_delta: -10.0,
    },
    {
      reason: "There is a delay of more than 10 minutes between the first transaction and subsequent spending.",
      criteria: "Delay before spending after funding",
      score_delta: 5.0,
    },
    {
      reason: "The wallet interacts with unverified contracts.",
      criteria: "All interacted contracts are verified",
      score_delta: -10.0,
    },
    {
      reason: "The contracts interacted with do not appear to be widely known or used.",
      criteria: "Contracts are publicly known or widely used",
      score_delta: -5.0,
    },
    {
      reason: "The wallet uses standard methods like 'approve' and a token transfer.",
      criteria: "Only standard methods are used",
      score_delta: 5.0,
    },
    {
      reason: "Funding wallet information is not available to assess its status.",
      criteria: "Funded by established or active wallets",
      score_delta: 0.0,
    },
    {
      reason: "The wallet is older than 7 days (created on 2025-05-05).",
      criteria: "Wallet is at least 7 days old",
      score_delta: 10.0,
    },
    {
      reason: "The wallet primarily uses one token (IDRX).",
      criteria: "Wallet uses multiple tokens",
      score_delta: -5.0,
    },
    {
      reason: "The wallet uses 'approve' calls in addition to token transfers.",
      criteria: "Wallet uses smart contract functions beyond transfers",
      score_delta: 5.0,
    },
    {
      reason: "No known connections to flagged addresses.",
      criteria: "No known scam/mixer/flagged connections",
      score_delta: 0.0,
    },
  ],
  behavioral_patterns: {
    outbound_only: true,
    contract_usage: {
      single_contract_usage: true,
      unverified_contract_usage: true,
    },
    transaction_anomalies: [],
  },
  transactions: [
    {
      method: "0x9045c025",
      status: "ok",
      fee_usd: 0.0,
      fee_wei: 250981475063,
      to_name: "contract",
      tx_hash: "0x9d48269e973cd2e60c17fd43db08c421a19eecaa3a8e5269490258b219f41e19",
      tx_type: ["contract_call", "token_transfer"],
      gas_used: 202364,
      from_name: "0x510DeD3072ac6967827A498360eDB0edf77BE542",
      gas_limit: 207575,
      gas_price: 1000253,
      timestamp: "2025-05-14T05:35:58+00:00",
      value_usd: 0.0,
      value_wei: 0,
      to_address: "0xFae6bE6ba726DFFbd112eF978ba0072b841A4af1",
      token_name: null,
      block_number: 20943983,
      from_address: "0x510DeD3072ac6967827A498360eDB0edf77BE542",
      token_amount: null,
      gas_efficiency: 0.9749,
      to_is_contract: true,
      to_is_verified: false,
      from_is_contract: false,
    },
    {
      method: "approve",
      status: "ok",
      fee_usd: 0.0,
      fee_wei: 74653618939,
      to_name: "contract",
      tx_hash: "0x5b7cf551d233b981c998ec2866ff4738a8487df34a0546d3be40e87fca0d0968",
      tx_type: ["contract_call"],
      gas_used: 27027,
      from_name: "0x510DeD3072ac6967827A498360eDB0edf77BE542",
      gas_limit: 27371,
      gas_price: 1000253,
      timestamp: "2025-05-14T05:35:44+00:00",
      value_usd: 0.0,
      value_wei: 0,
      to_address: "0xD43E67129FC5fA4F287f78Bef27155e7D1576caF",
      token_name: "IDRX",
      block_number: 20943976,
      from_address: "0x510DeD3072ac6967827A498360eDB0edf77BE542",
      token_amount: null,
      gas_efficiency: 0.9874,
      to_is_contract: true,
      to_is_verified: false,
      from_is_contract: false,
    },
  ],
  token_holdings: [
    {
      token: {
        name: "IDRX",
        type: "ERC-20",
        symbol: "IDRX",
        address: "0xD43E67129FC5fA4F287f78Bef27155e7D1576caF",
        holders: "2",
        decimals: "2",
        icon_url: null,
        volume_24h: null,
        address_hash: "0xD43E67129FC5fA4F287f78Bef27155e7D1576caF",
        total_supply: "10000000000000",
        exchange_rate: null,
        holders_count: "2",
        circulating_market_cap: null,
      },
      value: "9999970000000",
      token_id: null,
      token_instance: null,
    },
    {
      token: {
        name: "IDRX",
        type: "ERC-20",
        symbol: "IDRX",
        address: "0xD63029C1a3dA68b51c67c6D1DeC3DEe50D681661",
        holders: "148",
        decimals: "2",
        icon_url: null,
        volume_24h: null,
        address_hash: "0xD63029C1a3dA68b51c67c6D1DeC3DEe50D681661",
        total_supply: "1000000000000000000000000000000",
        exchange_rate: null,
        holders_count: "148",
        circulating_market_cap: null,
      },
      value: "15000000",
      token_id: null,
      token_instance: null,
    },
  ],
  comments: null,
  created_at: "2025-05-14T05:34:02.371171+00:00",
  updated_at: "2025-05-14T06:18:43.313177+00:00",
}

export const getAIWalletAnalysis = (address: string): AIWalletAnalysis | undefined => {
  // In a real application, this would fetch from an API based on the address
  // For now, we'll just return our sample data if the address matches
  if (address === aiWalletAnalysis.wallet_address) {
    return aiWalletAnalysis
  }
  return undefined
}
